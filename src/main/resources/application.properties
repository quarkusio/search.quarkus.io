quarkus.application.name=search-quarkus-io

# Application defaults
quarkusio.git-uri=https://github.com/quarkusio/quarkusio.github.io.git
quarkusio.localized.es.web-uri=https://es.quarkus.io/
quarkusio.localized.es.git-uri=https://github.com/quarkusio/es.quarkus.io.git
quarkusio.localized.pt.web-uri=https://pt.quarkus.io/
quarkusio.localized.pt.git-uri=https://github.com/quarkusio/pt.quarkus.io.git
quarkusio.localized.cn.web-uri=https://cn.quarkus.io/
quarkusio.localized.cn.git-uri=https://github.com/quarkusio/cn.quarkus.io.git
quarkusio.localized.ja.web-uri=https://ja.quarkus.io/
quarkusio.localized.ja.git-uri=https://github.com/quarkusio/ja.quarkus.io.git

# Indexing configuration
fetching.parallelism=8
fetching.timeout=10m
indexing.timeout=5m
## Index at 00:00 UTC every day
## The time was selected to minimize impact on users:
## In winter this would be: Paris 01:00, New Delhi: 05:30, New York: 19:00, Beijing: 08:00, Los Angeles: 16:00
## In summer this would be: Paris 02:00, New Delhi: 05:30, New York: 20:00, Beijing: 08:00, Los Angeles: 17:00
indexing.scheduled.cron=0 0 0 * * ?
## Indexing parallelism: we want many small batches here,
## so that a given batch is likely to be handled in a small number
## of bulk requests to Elasticsearch, making it unlikely that an indexing queue
## will be empty in the middle of indexing.
## See quarkus.hibernate-search-orm.elasticsearch.indexing below.
indexing.parallelism=80
indexing.batch-size=10
# Error reporting to GitHub issue:
# See https://github.com/quarkusio/search.quarkus.io/issues/89
# See https://github.com/quarkusio/search.quarkus.io/issues/127
%prod.indexing.error-reporting.type=github-issue
%prod.indexing.error-reporting.github.warning-repeat-delay=14d
%prod.indexing.error-reporting.github.issue.repository=quarkusio/search.quarkus.io
%prod.indexing.error-reporting.github.issue.id=${GITHUB_STATUS_ISSUE_ID}
%prod.indexing.error-reporting.github.token=${GITHUB_OAUTH}

# More secure HTTP defaults
quarkus.http.cors=true
quarkus.http.cors.origins=https://quarkus.io,/https://.*\\\\.quarkus\\\\.io/,/https://quarkus-(web)?site-pr-[0-9]+-preview\\\\.surge\\\\.sh/
quarkus.http.cors.methods=GET
quarkus.http.header."X-Content-Type-Options".value=nosniff
quarkus.http.header."X-Frame-Options".value=deny
quarkus.http.header."Strict-Transport-Security".value=max-age=31536000; includeSubDomains

quarkus.resteasy-reactive.path=/api

# Hibernate
## We actually don't need persistence, it's just that Hibernate Search requires Hibernate ORM at the moment.
## So we just use an in-memory DB.
## Note DB_CLOSE_DELAY is necessary to avoid the DB stopping and being cleared
## after some inactivity; see https://github.com/quarkusio/search.quarkus.io/issues/100
quarkus.datasource.jdbc.url=jdbc:h2:mem:searchquarkusio;DB_CLOSE_DELAY=-1
quarkus.hibernate-orm.database.generation=drop-and-create
## We need a large enough connection pool to accommodate highly-parallel indexing.
quarkus.datasource.jdbc.max-size=100
## But we don't need it to be that large after indexing.
quarkus.datasource.jdbc.min-size=0
## Hibernate Search
quarkus.hibernate-search-orm.elasticsearch.version=opensearch:2.11
quarkus.elasticsearch.devservices.image-name=opensearch-custom-plugin:2.11.0
## Limit parallelism of indexing, because OpenSearch can only handle so many documents in its buffers.
## This leads to at most 12*20=240 documents being indexed in parallel, which should be plenty
## given how large our documents can be.
quarkus.hibernate-search-orm.elasticsearch.indexing.queue-count=12
quarkus.hibernate-search-orm.elasticsearch.indexing.max-bulk-size=20
## We need to apply a custom OpenSearch mapping to exclude very large fields from the _source
quarkus.hibernate-search-orm.elasticsearch.schema-management.mapping-file=indexes/mapping-template.json
quarkus.hibernate-search-orm.elasticsearch.schema-management.settings-file=indexes/settings-template.json
## We don't expect OpenSearch to be reachable when the application starts
quarkus.hibernate-search-orm.elasticsearch.version-check.enabled=false
## ... and the application automatically creates indexes upon first indexing anyway.
quarkus.hibernate-search-orm.schema-management.strategy=none
## Make sure there are always enough backend connections available.
## In particular, we need to have extra connections for search
## even when heavily indexing, otherwise liveness/readiness checks will fail
## (and they would be right, as the app cannot be used)
quarkus.hibernate-search-orm.elasticsearch.max-connections-per-route=30
quarkus.hibernate-search-orm.elasticsearch.max-connections=90

# Dev/testing
quarkus.test.integration-test-profile=integrationtest
## We don't want dev mode and tests to rely on remote services (GitHub, ...), so
# - for dev mode we index a sample included in the test resources.
%dev.quarkusio.git-uri=file:${maven.project.testResourceDirectory}/quarkusio-sample.zip
%dev.quarkusio.localized.ja.git-uri=file:${maven.project.testResourceDirectory}/quarkusio-sample-ja.zip
%dev.quarkusio.localized.es.git-uri=file:${maven.project.testResourceDirectory}/quarkusio-sample-es.zip
%dev.quarkusio.localized.pt.git-uri=file:${maven.project.testResourceDirectory}/quarkusio-sample-pt.zip
%dev.quarkusio.localized.cn.git-uri=file:${maven.project.testResourceDirectory}/quarkusio-sample-cn.zip
# - for tests we use QuarkusIOSample to use a customized sample based on the one included in the test resources
#   so this property should never be used.
%test,integrationtest.quarkusio.git-uri=file:tests-should-use-quarkus-io-sample-setup-annotation
# disable scheduled indexing for dev/tests to not mess up anything with an unexpected reindexing:
%dev,test,integrationtest.indexing.scheduled.cron=off
## Allow localhost in particular
%dev.quarkus.http.cors.origins=/.*/

# Logging
## Shorter format
quarkus.log.console.format=%d{HH:mm:ss} %-5p [%c{1.2.}] %s%e%n
# disable any error reporting to GitHub, simple logger will be used instead:
%dev,test,integrationtest.indexing.error-reporting.type=log
## Logging
## Allow trace logs in important categories
quarkus.log.category."io.quarkus.search.app".min-level=TRACE
quarkus.log.category."org.hibernate.search".min-level=TRACE
quarkus.log.category."org.elasticsearch.client".min-level=TRACE
## Log HTTP accesses
quarkus.http.access-log.enabled=true
quarkus.http.access-log.exclude-pattern=/q/.*

# Enable management, info, ...
quarkus.management.enabled=true
quarkus.info.enabled=true

# OpenAPI
mp.openapi.extensions.smallrye.info.title=Quarkus Search API
%dev.mp.openapi.extensions.smallrye.info.title=Quarkus Search API (dev)
%test.mp.openapi.extensions.smallrye.info.title=Quarkus Search API (test)
mp.openapi.extensions.smallrye.info.version=1.0.0
mp.openapi.extensions.smallrye.info.description=Search Quarkus resources
mp.openapi.extensions.smallrye.info.contact.email=quarkus-dev@googlegroups.com
mp.openapi.extensions.smallrye.info.contact.name=Quarkus team
mp.openapi.extensions.smallrye.info.contact.url=https://github.com/quarkusio/search.quarkus.io

# Swagger UI
quarkus.swagger-ui.always-include=true
quarkus.swagger-ui.title=Quarkus Search API

# Deployment to OpenShift
quarkus.container-image.builder=openshift
quarkus.openshift.part-of=search-quarkus-io
# See src/main/kubernetes/openshift.yml for the search-backend StatefulSet definition
# Rely on OpenShift's internal DNS to resolve the IP to search-backend nodes
quarkus.openshift.env.vars.quarkus-hibernate-search-orm-elasticsearch-hosts=search-backend-0.search-backend:9200
# Images built on OpenShift have their HOME environment variable set to '/' by default,
# which obviously won't work well due to filesystem permissions.
# JGit in particular doesn't like it: https://bugs.eclipse.org/bugs/show_bug.cgi?id=560555
# We need a directory with write access, and this seems to be the only reliable one.
quarkus.openshift.env.vars.home=/tmp
# Renew the SSL certificate automatically
# This requires an additional controller to run on the OpenShift cluster (in our case it does).
# See https://github.com/tnozicka/openshift-acme/#enabling-acme-certificates-for-your-object
quarkus.openshift.annotations."kubernetes.io/tls-acme"=true
quarkus.openshift.env.configmaps=search-quarkus-io-config
quarkus.openshift.env.secrets=search-quarkus-io-secrets
# Declare resource requirements
quarkus.openshift.resources.limits.cpu=1000m
quarkus.openshift.resources.requests.cpu=400m
quarkus.openshift.resources.limits.memory=2Gi
quarkus.openshift.resources.requests.memory=1Gi
# Initial indexing may take a while, especially the quarkus.io Git cloning
quarkus.openshift.startup-probe.initial-delay=30S
quarkus.openshift.startup-probe.period=15S
quarkus.openshift.startup-probe.failure-threshold=40
# Declare the management port on the service
quarkus.openshift.ports."management".container-port=9000
quarkus.openshift.ports."management".host-port=90
# Don't use the version in (service) selectors,
# otherwise a rollback to an earlier version (due to failing startup) makes the service unavailable
quarkus.openshift.add-version-to-label-selectors=false